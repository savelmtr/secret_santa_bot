import asyncio
import os
import re

from cryptography.fernet import Fernet
from sqlalchemy import and_, update
from sqlalchemy.future import select
from sqlalchemy.orm import aliased
from telebot import asyncio_filters, types
from telebot.async_telebot import AsyncTeleBot
from telebot.asyncio_handler_backends import State, StatesGroup
from telebot.asyncio_storage import StateMemoryStorage
from telebot.types import Message
from telebot.types import User as TelebotUser

from callback_texts import CALLBACK_TEXTS
from models import Pairs, Rooms, Users
from viewmodel import (AsyncSession, UserCache, create_room, get_max_price,
                       get_members, get_user, get_user_info, is_admin,
                       is_paired, set_pairs, set_user_name_data, set_wishes,
                       to_room_attach)


NUM_PTTRN = re.compile(r'\d+')
TOKEN = os.getenv('TOKEN')
Encoder = Fernet(os.getenv('SECRET').encode())


class ButtonStorage(StatesGroup):
    connect_room = State()
    create_room = State()
    user_name = State()
    wish_list = State()
    update_name = State()
    update_wishes = State()
    create_password = State()
    enter_password = State()
    max_price = State()


bot = AsyncTeleBot(TOKEN, state_storage=StateMemoryStorage())
bot.add_custom_filter(asyncio_filters.StateFilter(bot))


@bot.message_handler(commands=['help'])
async def send_welcome(message: Message, markup):
    await bot.reply_to(message, """\
    –≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Ç–∞–π–Ω–æ–≥–æ –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞.

    /start –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã -- —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.
    /start –Ω–æ–º–µ—Ä_–∫–æ–º–Ω–∞—Ç—ã -- –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —É–∂–µ –∏–º–µ—é—â–µ–π—Å—è –∫–æ–º–Ω–∞—Ç–µ.
    /wish –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç -- –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º.
    /info -- —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã, 
    —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º, –∫–æ–º—É –¥–∞—Ä–∏–º, –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ–¥–∞—Ä–∏–≤–∞–µ–º–æ–≥–æ)
    /myrooms -- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–∞—Ö, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–º–∏
    /members -- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã.
    /enlock –ø–∞—Ä–æ–ª—å -- –æ—Ç–ø–µ—Ä–µ—Ç—å –∑–∞–ø–µ—Ä—Ç—É—é –∫–æ–º–Ω–∞—Ç—É.


    ** –°–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã **

    * /lock –ø–∞—Ä–æ–ª—å -- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –Ω–µ–π –ª—é–¥–µ–π.
    –ß—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω—ã–µ –ª—é–¥–∏ –Ω–µ –∏–º–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –≤–∞—à —É—é—Ç–Ω—ã–π –º–µ–∂–¥—É—Å–æ–±–æ–π—á–∏–∫,
    –∏—Ö –º–æ–∂–Ω–æ "–∑–∞–ø–∏—Ä–∞—Ç—å" –ø–∞—Ä–æ–ª–µ–º. –ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–∏—Ç–µ /lock.

    * /set_pairs -- —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã.

    * /reset -- —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.

    * /rename -- –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.
    
    * /set_max_price -- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞
    """, reply_markup=markup)


async def button_generator(user_payload: TelebotUser):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã üë•'), types.KeyboardButton('–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìã'))
    markup.row(types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚úç'), types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è üéÄ'))
    admin = await is_admin(user_payload)
    if admin:
        markup.row(types.KeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã üé≤'), types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚ùå'))
        markup.row(types.KeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å üîí'), types.KeyboardButton('C–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å üîì'))
        markup.row(types.KeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –ø–æ–¥–∞—Ä–∫–æ–≤ üí∏'))
    return markup


@bot.message_handler(state=ButtonStorage.update_name)
async def update_name(message):
    name_data = str(message.text).split(' ')
    if len(name_data) != 2:
        await bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –≤ 2 —Å–ª–æ–≤–∞ üòÄ')
        await bot.set_state(message.from_user.id, ButtonStorage.user_name, message.chat.id)
    first_name, last_name = name_data
    if not str(first_name).isalpha() or not str(last_name).isalpha():
        await bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –≤ 2 —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã üòÄ')
        await bot.set_state(message.from_user.id, ButtonStorage.user_name, message.chat.id)
    await set_user_name_data(first_name, last_name, message.from_user)
    await bot.delete_state(message.from_user.id, message.chat.id)
    msg = await get_user_info(message.from_user, status='update')
    markup = await button_generator(message.from_user)
    await bot.reply_to(message, msg, reply_markup=markup)


@bot.message_handler(state=ButtonStorage.update_wishes)
async def update_wishes(message):
    wishes = message.text
    await set_wishes(message.from_user.id, wishes)
    await bot.delete_state(message.from_user.id, message.chat.id)
    msg = await get_user_info(message.from_user, status='update')
    markup = await button_generator(message.from_user)
    await bot.reply_to(message, msg, reply_markup=markup)


@bot.message_handler(commands=['help'])
async def send_welcome(message, markup):
    await bot.reply_to(message, """\
–•–æ-—Ö–æ—É-—Ö–æ—É! üéÖ

–ù–∞ —É–ª–∏—Ü–µ –≤—ã–ø–∞–ª –ø–µ—Ä–≤—ã–π —Å–Ω–µ–≥, –∞ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –±–ª–∏–∑–∏—Ç—Å—è –ù–æ–≤—ã–π –≥–æ–¥! üéÜ
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Ç–∞–π–Ω–æ–≥–æ –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞.

–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
1Ô∏è‚É£ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π;
2Ô∏è‚É£ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –¥–ª—è –í–∞—à–µ–≥–æ —Ç–∞–π–Ω–æ–≥–æ –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞;
3Ô∏è‚É£ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    
–¢–∞–∫–∂–µ, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∏–≥—Ä—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", –∞ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, —Ç–æ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ"
        """, reply_markup=markup)


@bot.message_handler(state=ButtonStorage.create_room)
async def create_room_(message):
    room_name = message.text
    room_id = await create_room(room_name, message.from_user)
    await bot.reply_to(message, f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É {room_name} c id {room_id}')
    room, is_protected = await to_room_attach(room_id, message.from_user)
    bot_info = await bot.get_me()
    await bot.send_message(message.chat.id, CALLBACK_TEXTS.link.format(room_name=room_name,
                                                                       bot_name=bot_info.username,
                                                                       room_id=room_id))
    markup = await button_generator(message.from_user)

    msg = await get_user_info(message.from_user)
    await bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É {room_name}!\n'
                                            '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n'
                                            f'{msg}', reply_markup=markup)
    await bot.delete_state(message.from_user.id, message.chat.id)


@bot.callback_query_handler(func=lambda call: 'room' in call.data)
async def callback_query(call):
    req = call.data
    if 'create_room' == req:
        await bot.send_message(chat_id=call.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã')
        await bot.set_state(call.from_user.id, ButtonStorage.create_room, call.message.chat.id)
    elif 'connect_room' == req:
        await bot.send_message(chat_id=call.message.chat.id, text=CALLBACK_TEXTS.connection_room)
        await bot.delete_state(call.from_user.id, call.message.chat.id)
        await bot.set_state(call.from_user.id, ButtonStorage.connect_room, call.message.chat.id)


@bot.message_handler(state=ButtonStorage.create_password)
async def create_password_(message: Message):
    room_id = await lock(message)
    markup = await button_generator(message.from_user)
    await bot.delete_state(message.from_user.id, message.chat.id)
    await bot.send_message(message.chat.id, '–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã! \n'
                                            f'–ü–∞—Ä–æ–ª—å: {message.text}', reply_markup=markup)


@bot.message_handler(state=ButtonStorage.connect_room)
async def connect_room_(message: Message):
    try:
        room_id = int(message.text)
    except ValueError:
        await bot.reply_to(message, f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–Ω–∞—Ç—ã c id:{room_id}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        return
    room_name, is_protected = await to_room_attach(room_id, message.from_user)
    if not room_name:
        await bot.reply_to(message, f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–Ω–∞—Ç—ã c id:{room_id}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        await bot.set_state(message.from_user.id, ButtonStorage.connect_room, message.chat.id)
    elif room_name and not is_protected:
        await bot.reply_to(message, CALLBACK_TEXTS.connect_to_room.format(room_name=room_name))
        await bot.set_state(message.from_user.id, ButtonStorage.user_name, message.chat.id)

    elif room_name and is_protected:
        await bot.reply_to(
            message,
            f'–•–æ-—Ö–æ—É-—Ö–æ—É!'
            f'–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ {room_name} c id:{room_id}.'
            ' –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–µ—Ä—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∞—Ä–æ–ª—å'
        )
        await bot.set_state(message.from_user.id, ButtonStorage.enter_password, message.chat.id)


@bot.message_handler(state=ButtonStorage.enter_password)
async def entering_to_room(message):
    await enlock(message)


@bot.message_handler(state=ButtonStorage.user_name)
async def get_user_name(message: Message):
    name_data = str(message.text).split(' ')
    if len(name_data) != 2:
        await bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –≤ 2 —Å–ª–æ–≤–∞ üòÄ')
        await bot.set_state(message.from_user.id, ButtonStorage.user_name, message.chat.id)
    first_name, last_name = name_data
    if not str(first_name).isalpha() or not str(last_name).isalpha():
        await bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –≤ 2 —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã üòÄ')
        await bot.set_state(message.from_user.id, ButtonStorage.user_name, message.chat.id)
    await set_user_name_data(first_name, last_name, message.from_user)
    price = await get_max_price(message.from_user.id)
    await bot.send_message(message.chat.id, CALLBACK_TEXTS.wish_message.format(max_price=price))
    await bot.set_state(message.from_user.id, ButtonStorage.wish_list, message.chat.id)


@bot.message_handler(state=ButtonStorage.wish_list)
async def get_user_wishes(message: Message):
    payload = message.text
    if not payload:
        await bot.set_state(message.from_user.id, ButtonStorage.wish_list, message.chat.id)
    else:
        await set_wishes(message.from_user.id, payload)
    await bot.delete_state(message.from_user.id, message.chat.id)
    msg = await get_user_info(message.from_user)
    markup = await button_generator(message.from_user)
    await bot.reply_to(message, msg, reply_markup=markup)


@bot.message_handler(state=ButtonStorage.max_price)
async def enter_max_price(message):
    await set_max_price(message)
    await bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(commands=['start'])
async def get_room(message: Message):
    payload = message.text[6:].strip()
    if not payload:
        create_room_btn = types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É', callback_data='create_room')
        connect_room_btn = types.InlineKeyboardButton(text='–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ', callback_data='connect_room')
        markup = types.InlineKeyboardMarkup()
        markup.add(create_room_btn)
        markup.add(connect_room_btn)
        await send_welcome(message, markup)
    else:
        user = await get_user(message.from_user)
        try:
            in_room = int(payload) == user.room_id
        except ValueError:
            await bot.send_message(message.chat.id, f'"{payload}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º id –∫–æ–º–Ω–∞—Ç—ã')
            return
        if not in_room:
            room_name, is_protected = await to_room_attach(int(payload), message.from_user)
            if is_protected:
                await bot.send_message(message.chat.id, '–û—Ö-—Ö–æ—É-—Ö–æ—É üéÖ'
                                                        f'–ü–æ—Ö–æ–∂–µ –∫–æ–º–Ω–∞—Ç–∞  {room_name} –∑–∞–ø–æ—Ä–æ–ª–µ–Ω–∞.'
                                                        f'–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∞—Ä–æ–ª—å')
                await bot.set_state(user.id, ButtonStorage.enter_password, message.chat.id)
            else:
                await bot.reply_to(message, CALLBACK_TEXTS.connect_to_room.format(room_name=room_name))
                await bot.set_state(user.id, ButtonStorage.user_name, message.chat.id)
        else:
            markup = await button_generator(message.from_user)
            await bot.send_message(message.chat.id, '–•–æ-—Ö–æ-—Ö–æ! –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å!', reply_markup=markup)


@bot.message_handler(content_types=['text'])
async def button_text_handler(message):
    command = message.text
    admin = await is_admin(message.from_user)
    markup = await button_generator(message.from_user)
    msg = ''
    match command:
        case '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã üë•':
            msg = await get_members(message.from_user)
            await bot.reply_to(message, msg, reply_markup=markup)
        case '–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìã':
            paired = await is_paired(message.from_user)
            if paired:
                await get_info(message)
            else:
                msg = await get_user_info(message.from_user, status='info')
                await bot.reply_to(message, msg, reply_markup=markup)
        case '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚úç':
            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏ –°–∞–Ω—Ç–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç –∏—Ö üéÖ ‚úç')
            await bot.set_state(message.from_user.id, ButtonStorage.update_name, message.chat.id)
        case '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è üéÄ':
            await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –°–∞–Ω—Ç–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç –∏—Ö üéÖ üéÄ')
            await bot.set_state(message.from_user.id, ButtonStorage.update_wishes, message.chat.id)
        case '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã üé≤':
            if admin:
                pairs_set = await set_pairs(message.from_user)
                if pairs_set:
                    await bot.send_message(message.chat.id, '–ü–∞—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã üéÄ')
                else:
                    await bot.send_message(message.chat.id, '–í—ã –æ–¥–∏–Ω-–æ–¥–∏–Ω—ë—à–µ–Ω–µ–∫ –≤ –∫–æ–º–Ω–∞—Ç–µ üòß')
            else:
                await bot.send_message(message.chat.id, '–£–ø—Å! –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ —à–∞–ª–∏—Ç–µ üòò')
        case '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚ùå':
            if admin:
                await reset_members(message)
            else:
                await bot.send_message(message.chat.id, '–£–ø—Å! –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ —à–∞–ª–∏—Ç–µ üòò')
        case '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å üîí':
            if admin:
                await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∞—Ä–æ–ª—å')
                await bot.set_state(message.from_user.id, ButtonStorage.create_password, message.chat.id)
            else:
                await bot.send_message(message.chat.id, '–£–ø—Å! –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ —à–∞–ª–∏—Ç–µ üòò')
        case 'C–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å üîì':
            if admin:
                message.text = None
                await lock(message)
            else:
                await bot.send_message(message.chat.id, '–£–ø—Å! –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ —à–∞–ª–∏—Ç–µ üòò')
        case '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –ø–æ–¥–∞—Ä–∫–æ–≤ üí∏':
            if admin:
                await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞')
                await bot.set_state(message.from_user.id, ButtonStorage.max_price, message.chat.id)
            else:
                await bot.send_message(message.chat.id, '–£–ø—Å! –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ —à–∞–ª–∏—Ç–µ üòò')
        case _:
            pass


@bot.message_handler(commands=['info'])
async def get_info(message: Message):
    user = await get_user(message.from_user)
    giver = aliased(Users)
    taker = aliased(Users)
    candidate = aliased(Rooms)
    rooms = aliased(Rooms)
    req = (
        select(
            rooms.name.label('room'),
            rooms.id.label('room_id'),
            rooms.max_price,
            candidate.name.label('candidate'),
            candidate.id.label('candidate_id'),
            giver.wish_string.label('my_wishes'),
            taker.first_name,
            taker.last_name,
            taker.username,
            taker.wish_string
        )
        .join(rooms, rooms.id == giver.room_id, isouter=True)
        .join(candidate, candidate.id == giver.candidate_room_id, isouter=True)
        .join(Pairs, and_(Pairs.giver_id == giver.id, Pairs.room_id == rooms.id), isouter=True)
        .join(taker, taker.id == Pairs.taker_id, isouter=True)
        .filter(
            giver.id == user.id
        )
    )
    async with AsyncSession.begin() as session:
        q = await session.execute(req)
        data = q.one_or_none()
        msg = ''
        for line, args in (
                ('–í—ã –ø–æ–¥—Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫ –∫–æ–º–Ω–∞—Ç–µ {}.', (data.room,)),
                ('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞: {}', (data.max_price,)),
                ('–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {}, –Ω–æ –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å.', (data.candidate,)),
                (f'–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: https://t.me/{(await bot.get_me()).username}/?start={{}}', (data.room_id,)),
                ('–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {}.', (data.my_wishes,)),
                ('–í—ã –¥–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫: @{} {} {}.', (data.username, data.first_name, data.last_name)),
                ('–ü–æ–∂–µ–ª–∞–Ω–∏—è –æ–¥–∞—Ä–∏–≤–∞–µ–º–æ–≥–æ: {}.', (data.wish_string,))
        ):
            if any(args):
                msg += line.format(*map(lambda x: '' if x is None else x, args)) + '\n'
        markup = await button_generator(message.from_user)
        if msg:
            await bot.reply_to(message, msg, reply_markup=markup)
        else:
            await bot.reply_to(message, "–ë–æ—Ç –ø–æ–∫–∞ —Å –≤–∞–º–∏ –Ω–µ –∑–Ω–∞–∫–æ–º.", reply_markup=markup)


@bot.message_handler(commands=['myrooms'])
async def get_my_rooms(message: Message):
    user = await get_user(message.from_user)
    req = (
        select(Rooms)
        .filter(Rooms.creator_id == user.id)
    )
    async with AsyncSession.begin() as session:
        q = await session.execute(req)
        rooms = q.scalars().all()
    if not rooms:
        await bot.reply_to(message, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã.')
    else:
        msg = '\n'.join([f'{r.id} {r.name}' for r in rooms])
        await bot.reply_to(message, msg)


@bot.message_handler(commands=['reset'])
async def reset_members(message: Message):
    user = await get_user(message.from_user)
    cte = (
        select(Rooms.id)
        .filter(
            Rooms.id == user.room_id,
            Rooms.creator_id == user.id
        )
        .cte('cte')
    )
    req = (
        update(Users)
        .where(
            Users.room_id == select(cte.c.id).scalar_subquery(),
            Users.id != user.id
        )
        .values(
            room_id=None
        )
    )
    UserCache.clear()
    async with AsyncSession.begin() as session:
        await session.execute(req)
        q = await session.execute(select(cte.c.id))
        room_name = q.scalar()
    if room_name:
        await bot.reply_to(message, '–ö–æ–º–Ω–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Å—Ç–∞–ª–∏—Å—å –æ–¥–Ω–∏ –≤—ã.')
    else:
        await bot.reply_to(message, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –ª–∏–±–æ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –ø–æ–∫–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π.')


@bot.message_handler(commands=['rename'])
async def rename_room(message: Message):
    payload = message.text[7:].strip()
    if not payload:
        await bot.reply_to(message, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã.')
        return
    user = await get_user(message.from_user)
    req = (
        update(Rooms)
        .where(
            Rooms.id == user.room_id,
            Rooms.creator_id == user.id
        )
        .values(
            name=payload
        )
        .returning(
            Rooms.id,
            Rooms.name
        )
    )
    async with AsyncSession.begin() as session:
        q = await session.execute(req)
        res = q.one_or_none()
    if not res:
        await bot.reply_to(message, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç—ã, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ.')
    else:
        await bot.reply_to(message, f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Å id:{res.id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {res.name}')


async def lock(message: Message):
    payload = message.text
    if not payload:
        passkey = None
    else:
        passkey = Encoder.encrypt(payload.encode()).decode()
    user = await get_user(message.from_user)
    req = (
        update(Rooms)
        .where(
            Rooms.id == user.room_id,
            Rooms.creator_id == user.id
        )
        .values(
            passkey=passkey
        )
        .returning(Rooms.id)
    )
    async with AsyncSession.begin() as session:
        q = await session.execute(req)
        room_id = q.scalar()
    markup = await button_generator(message.from_user)
    if room_id is None:
        await bot.reply_to(message, '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –µ—ë –∑–∞–ø–µ—Ä–µ—Ç—å.', reply_markup=markup)
    elif passkey is None:
        await bot.reply_to(message, '–ü–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã —Å–±—Ä–æ—à–µ–Ω.', reply_markup=markup)
    else:
        await bot.reply_to(message, '–ü–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', reply_markup=markup)


@bot.message_handler(commands=['enlock'])
async def enlock(message: Message):
    payload = message.text
    user = await get_user(message.from_user)
    passkey_req = (
        select(Rooms.passkey)
        .filter(
            Rooms.id == user.candidate_room_id
        )
    )
    enlock_req = (
        update(Users)
        .where(Users.id == user.id)
        .values(
            candidate_room_id=None,
            room_id=user.candidate_room_id
        )
    )
    async with AsyncSession.begin() as session:
        q = await session.execute(passkey_req)
        passkey = q.scalar()
    if passkey:
        if payload == Encoder.decrypt(passkey.encode()).decode():
            async with AsyncSession.begin() as session:
                await session.execute(enlock_req)
            UserCache.clear()
            await bot.reply_to(message, '–ö–æ–º–Ω–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞.')
            await bot.send_message(message.chat.id,
                                   '–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é —á—Ç–æ–±—ã —è –≤–Ω–µ—Å —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! üòá')
            await bot.set_state(message.from_user.id, ButtonStorage.user_name, message.chat.id)
        else:
            await bot.reply_to(message, '–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üòû'
                                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            await bot.set_state(message.from_user.id, ButtonStorage.enter_password, message.chat.id)
    else:
        await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é —á—Ç–æ–±—ã —è –≤–Ω–µ—Å —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! üòá')
        await bot.set_state(message.from_user.id, ButtonStorage.user_name, message.chat.id)


async def set_max_price(message: Message):
    payload = message.text
    user = await get_user(message.from_user)
    req = (
        update(Rooms)
        .where(
            Rooms.id == user.room_id,
            Rooms.creator_id == user.id
        )
        .values(
            max_price=payload
        )
        .returning(
            Rooms.name
        )
    )
    async with AsyncSession.begin() as session:
        q = await session.execute(req)
        name = q.scalar()
    markup = await button_generator(message.from_user)
    if not name:
        await bot.reply_to(
            message,
            f'–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞ –≤ –Ω–µ–π.', reply_markup=markup
        )
    elif payload:
        await bot.reply_to(message, f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {name} ({payload} üí∏).',
                           reply_markup=markup)
    else:
        await bot.reply_to(message, f'–°–±—Ä–æ—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {name}.', reply_markup=markup)


if __name__ == '__main__':
    asyncio.run(bot.polling())
