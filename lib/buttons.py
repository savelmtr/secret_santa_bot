from telebot.types import Message
from lib.viewmodel import (get_info, is_attached,
                       get_members, get_user_info, lock, reset_members,
                       is_paired, set_pairs)
from typing import Callable
from lib.states import States
from lib.base import AbstractButton, AbstractButtonSet


def check_if_admin(method: Callable):
    async def wrapped(self, message: Message):
        admin = await is_attached(message.chat.id, True)
        if admin:
            return await method(self, message)
        else:
            await self.bot.send_message(message.chat.id, '–£–ø—Å! –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ —à–∞–ª–∏—Ç–µ üòò')
    return wrapped


class GetTeamMates(AbstractButton):
    name = '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã üë•'

    async def run(self, message: Message):
        msg = await get_members(message.from_user)
        await self.bot.send_message(message.chat.id, msg)


class GetMyData(AbstractButton):
    name = '–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ üìã'

    async def run(self, message: Message):
        paired = await is_paired(message.from_user)
        if paired:
            msg = await get_info(message.from_user, self.bot)
        else:
            msg = await get_user_info(message.from_user, status='info')
        await self.bot.send_message(message.chat.id, msg)


class ChangeMyName(AbstractButton):
    name = '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚úç'

    async def run(self, message: Message):
        await self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏ –°–∞–Ω—Ç–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç –∏—Ö üéÖ ‚úç')
        await self.bot.set_state(message.from_user.id, States.update_name, message.chat.id)


class ChangeWishes(AbstractButton):
    name = '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è üéÄ'

    async def run(self, message: Message):
        await self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –°–∞–Ω—Ç–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç –∏—Ö üéÖ üéÄ')
        await self.bot.set_state(message.from_user.id, States.update_wishes, message.chat.id)


class GeneratePairs(AbstractButton):
    name = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã üé≤'

    @check_if_admin
    async def run(self, message: Message):
        pairs_set = await set_pairs(message.from_user)
        if pairs_set:
            await self.bot.send_message(message.chat.id, '–ü–∞—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã üéÄ')
        else:
            await self.bot.send_message(message.chat.id, '–í—ã –æ–¥–∏–Ω-–æ–¥–∏–Ω—ë—à–µ–Ω–µ–∫ –≤ –∫–æ–º–Ω–∞—Ç–µ üòß')


class DeleteMembers(AbstractButton):
    name = '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚ùå'

    @check_if_admin
    async def run(self, message: Message):
        reset_txt = await reset_members(message.from_user)
        await self.bot.send_message(message.chat.id, reset_txt)


class SetPassword(AbstractButton):
    name = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å üîí'

    @check_if_admin
    async def run(self, message: Message):
        await self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∞—Ä–æ–ª—å')
        await self.bot.set_state(message.from_user.id, States.create_password, message.chat.id)


class DeletePassword(AbstractButton):
    name = 'C–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å üîì'

    @check_if_admin
    async def run(self, message: Message):
        lock_msg = await lock(message.from_user)
        await self.bot.send_message(message.chat.id, lock_msg)


class SetMaxPrice(AbstractButton):
    name = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –ø–æ–¥–∞—Ä–∫–æ–≤ üí∏'

    @check_if_admin
    async def run(self, message: Message):
        await self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞')
        await self.bot.set_state(message.from_user.id, States.max_price, message.chat.id)


class RenameRoom(AbstractButton):
    name = '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É ü™Ñ'

    @check_if_admin
    async def run(self, message: Message):
        await self.bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã')
        await self.bot.set_state(message.from_user.id, States.rename, message.chat.id)


class UserButtonSet(AbstractButtonSet):
    buttons = (
        (GetTeamMates, GetMyData),
        (ChangeMyName, ChangeWishes)
    )

    async def is_available(self, chat_id: int | str):
        return await is_attached(chat_id)


class AdminButtonSet(AbstractButtonSet):
    buttons = (
        (GetTeamMates, GetMyData),
        (ChangeMyName, ChangeWishes),
        (GeneratePairs, DeleteMembers),
        (SetPassword, DeletePassword),
        (SetMaxPrice, RenameRoom)
    )

    async def is_available(self, chat_id: int | str):
        return await is_attached(chat_id, True)
